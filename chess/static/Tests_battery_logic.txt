//TEST CODE

function check_vertical_movements(self, future_pos){

  for (let x = 0; x < 8; x++){
        if ((self.position_board[1]) == future_pos[1]){
          if ((self.position_board[0]-(1+x)) == future_pos[0]){

            for (let x = 0; x < 8; x++){
              if ((self.position_board[0]-(1+x)) > future_pos[0]){
                
                if(board[(self.position_board[0]-(1+x))][self.position_board[1]] != '    '){
                  return false
                }
              }
            }
            return true
          }
          else if ((self.position_board[0]+(1+x)) == future_pos[0]){

            for (let x = 0; x < 8; x++){
              if ((self.position_board[0]+(1+x)) < future_pos[0]){
                if(board[(self.position_board[0]+(1+x))][self.position_board[1]] != '    '){
                  return false
                }
              }
            }
              
              return true
          }
        }
        else if ((self.position_board[0]) == future_pos[0]){
          if ((self.position_board[1]-(1+x)) == future_pos[1]){

            for (let x = 0; x < 8; x++){
              if ((self.position_board[1]-(1+x)) > future_pos[1]){
                if(board[self.position_board[0]][(self.position_board[1]-(1+x))] != '    '){
                  return false
                }
              }
            }
            return true
          }
          else if ((self.position_board[1]+(1+x)) == future_pos[1]){

            for (let x = 0; x < 8; x++){
              if ((self.position_board[1]+(1+x)) < future_pos[1]){
                if(board[self.position_board[0]][(self.position_board[1]+(1+x))] != '    '){
                  return false
                }
              }
            }
            return true
          }

        }
    }
    return false
}

function check_diagonal_movements(self, future_pos){
  for (let x = 0; x < 8; x++){
        if ((self.position_board[1]+(1+x)) == future_pos[1]){
          if ((self.position_board[0]-(1+x)) == future_pos[0]){
            for (let x = 0; x < 8; x++){
              if ((self.position_board[0]-(1+x)) > future_pos[0]){
                if ((self.position_board[1]+(1+x)) < future_pos[1]){
                  if(board[(self.position_board[0]-(1+x))][(self.position_board[1]+(1+x))] != '    '){
                    return false
                  }
                }
              }
            }
            return true
          }
          else if ((self.position_board[0]+(1+x)) == future_pos[0]){

            for (let x = 0; x < 8; x++){
              if ((self.position_board[0]+(1+x)) < future_pos[0]){
                if ((self.position_board[1]+(1+x)) < future_pos[1]){
                  if(board[(self.position_board[0]+(1+x))][(self.position_board[1]+(1+x))] != '    '){
                    return false
                  }
                }
              }
            }
              return true
          }
        }
        else if ((self.position_board[1]-(1+x)) == future_pos[1]){
          if ((self.position_board[0]-(1+x)) == future_pos[0]){
            for (let x = 0; x < 8; x++){
              if ((self.position_board[1]-(1+x)) > future_pos[1]){
                if ((self.position_board[0]-(1+x)) > future_pos[0]){
                  if(board[(self.position_board[0]-(1+x))][(self.position_board[1]-(1+x))] != '    '){
                    return false
                  }
                }
              }
            }
            return true
          }
          else if ((self.position_board[0]+(1+x)) == future_pos[0]){

            for (let x = 0; x < 8; x++){
              if ((self.position_board[1]-(1+x)) > future_pos[1]){
                if ((self.position_board[0]+(1+x)) < future_pos[0]){
                  if(board[(self.position_board[0]-(1+x))][(self.position_board[1]+(1+x))] != '    '){
                    return false
                  }
                }
              }
            }
            return true
          }

        }
    }

    return false
}







function catch_piece(king_color, piece, arg1, arg2){
  
  try{
    piece = piece[0].split("_")
    if (king_color.split("_")[0] == 'B'){
              king_color = 'W'
    }else{
              king_color = 'B'
    }
    console.log(piece)
  }catch (TypeError){
      return 'nothing'
    }
  try{
    if (king_color.split("_")[0] == piece[0]){
      if(piece[1][0] == arg1 || piece[1][0] == arg2){
        return true
        }
      }
      
    }catch (TypeError){
      return 'nothing'
    }
    return 'nothing'
}



function check_king_line(self, future_pos){
  //lê o board e caça o "W" chama a função check e olha se a peça ataca, tabém e verifica se está no range do king
  //CHECK DIAGONAL PIECES
  let piece = ''
  let return_catch = false
  for (let x = 0; x < 8; x++){
    try{
        if (board[(future_pos[0]-(1+x))][(future_pos[1]+(1+x))] != "    "){
          piece = board[(future_pos[0]-(1+x))][(future_pos[1]+(1+x))]
          return_catch = catch_piece(self.identifier,piece,'Q','B')
          if (return_catch == true){
            return true
          }else if (return_catch == 'nothing'){
            break;
          }

        }
      }
      catch (TypeError){
        break;
      }
  }
  for (let x = 0; x < 8; x++){
    try{
          if (board[(future_pos[0]+(1+x))][(future_pos[1]+(1+x))] != "    "){
            piece = board[(future_pos[0]+(1+x))][(future_pos[1]+(1+x))]
            return_catch = catch_piece(self.identifier,piece,'Q','B')
            if (return_catch == true){
              return true
            }else if (return_catch == 'nothing'){
              break;
            }

          }
        }
        catch (TypeError){
          break;
        }
    }
  for (let x = 0; x < 8; x++){
    try{
          if (board[(future_pos[0]-(1+x))][(future_pos[1]-(1+x))] != "    "){
            piece = board[(future_pos[0]-(1+x))][(future_pos[1]-(1+x))]
            return_catch = catch_piece(self.identifier,piece,'Q','B')
            if (return_catch == true){
              return true
            }else if (return_catch == 'nothing'){
              break;
            }

          }
        }
        catch (TypeError){
          break;
        }
  }
  for (let x = 0; x < 8; x++){
    try{
          if (board[(future_pos[0]+(1+x))][(future_pos[1]-(1+x))] != "    "){
            piece = board[(future_pos[0]+(1+x))][(future_pos[1]-(1+x))]
            return_catch = catch_piece(self.identifier,piece,'Q','B')
            if (return_catch == true){
              return true
            }else if (return_catch == 'nothing'){
              break;
            }

          }
        }
        catch (TypeError){
          break;
        }
  }


  //CHECK VERTICAL OR HORIZONTAL PIECES
  for (let x = 0; x < 8; x++){
    try{
        if (board[(future_pos[0]-(1+x))][future_pos[1]] != "    "){
          piece = board[(future_pos[0]-(1+x))][future_pos[1]]
          return_catch = catch_piece(self.identifier,piece,'Q','T')
          if (return_catch == true){
            return true
          }else if (return_catch == 'nothing'){
            break;
          }

        }
      }
      catch (TypeError){
        break;
      }
  }
  for (let x = 0; x < 8; x++){
    try{
          if (board[(future_pos[0]+(1+x))][future_pos[1]] != "    "){
            piece = board[(future_pos[0]+(1+x))][future_pos[1]]
            return_catch = catch_piece(self.identifier,piece,'Q','T')
            if (return_catch == true){
              return true
            }else if (return_catch == 'nothing'){
              break;
            }

          }
        }
        catch (TypeError){
          break;
        }
    }
  for (let x = 0; x < 8; x++){
    try{
          if (board[future_pos[0]][(future_pos[1]-(1+x))] != "    "){
            piece = board[future_pos[0]][(future_pos[1]-(1+x))]
            return_catch = catch_piece(self.identifier,piece,'Q','T')
            if (return_catch == true){
              return true
            }else if (return_catch == 'nothing'){
              break;
            }

          }
        }
        catch (TypeError){
          break;
        }
  }
  for (let x = 0; x < 8; x++){
    try{
          if (board[future_pos[0]][(future_pos[1]+(1+x))] != "    "){
            piece = board[future_pos[0]][(future_pos[1]+(1+x))]
            return_catch = catch_piece(self.identifier,piece,'Q','T')
            if (return_catch == true){
              return true
            }else if (return_catch == 'nothing'){
              break;
            }

          }
        }
        catch (TypeError){
          break;
        }
  }
    return false
}



class Pawn{
  constructor(proto, identifier = null, color = null, position_board = null, first_move = 2){
    this.__prototype__ = proto
    this.identifier = identifier
    this.piece = 'pawn'
    this.color = color
    this.position_board = position_board;
    this.first_move = first_move;
  }
  check_movement(future_pos = null){
    let possible = ''
    possible = {
        'white' : [
          ['normal', this.position_board[0]-1, this.position_board[1]],
          ['first_move', this.position_board[0]-2 ,this.position_board[1], '2'],
          ['first_move', this.position_board[0]-1 ,this.position_board[1], '1'],
          ['capture_piece', this.position_board[0]-1 ,this.position_board[1]-1],
          ['capture_piece', this.position_board[0]-1 ,this.position_board[1]+1],
          ['probability_capt', future_pos[0]-1, future_pos[1]-1],
          ['probability_capt', future_pos[0]-1, future_pos[1]+1],
        ],

        'black' : [
          ['normal', this.position_board[0]+1, this.position_board[1]],
          ['first_move', this.position_board[0]+2 ,this.position_board[1], '2'],
          ['first_move', this.position_board[0]+1 ,this.position_board[1], '1'],
          ['capture_piece', this.position_board[0]+1 ,this.position_board[1]-1],
          ['capture_piece', this.position_board[0]+1 ,this.position_board[1]+1],
          ['probability_capt', future_pos[0]+1, future_pos[1]-1],
          ['probability_capt', future_pos[0]+1, future_pos[1]+1],
        ]
      }

      let between = ''
        between = { 'white' : [(this.position_board[0]-1),this.position_board[1]],

                    'black' : [(this.position_board[0]+1),this.position_board[1]],
        }



      if (this.first_move == 2){
        var wich_op = 'first_move'
      }else{
        wich_op = ''
      }
      
      for (let x = 0; x < possible[color].length; x++){
          if (wich_op == 'first_move'){
            if (board[between[color][0]][between[color][1]] != '    ' && possible[color][x][3] == '2'){
              return false
            }
          }
          if (possible[color][x][1] == future_pos[0]){
            if (possible[color][x][2] == future_pos[1]){
              if (board[between[color][0]][between[color][1]] != '    ' && possible[color][x][0] != 'capture_piece'){
                return false
              }
              this.first_move -= 1
              return true
            }
          }

      }
      return false
  }
}

class Tower{
  constructor(proto, identifier = null, color = null, position_board = null,){
    this.__prototype__ = proto
    this.identifier = identifier
    this.piece = 'tower'
    this.color = color
    this.position_board = position_board;
  }
  check_movement = (future_pos) => {return check_vertical_movements(this, future_pos)}
  try_rock(){

  }
}

class Horse{
  constructor(proto, identifier = null, color = null, position_board = null,){
    this.__prototype__ = proto
    this.identifier = identifier
    this.piece = 'horse'
    this.color = color
    this.position_board = position_board;
  }
  check_movement(future_pos){
    let possible = ''
      possible = [
          [this.position_board[0]-2 ,this.position_board[1]-1],
          [this.position_board[0]-1 ,this.position_board[1]-2],
          [this.position_board[0]+1 ,this.position_board[1]-2],
          [this.position_board[0]+2 ,this.position_board[1]-1],
          [this.position_board[0]-2 ,this.position_board[1]+1],
          [this.position_board[0]-1 ,this.position_board[1]+2],
          [this.position_board[0]+1 ,this.position_board[1]+2],
          [this.position_board[0]+2 ,this.position_board[1]+1]
      ]

      for (let x = 0; x < 8; x++){

          if (possible[x][0] == future_pos[0]){
            if (possible[x][1] == future_pos[1]){
              return true
            }
          }


      }
  }
}

class Bishop{
  constructor(proto, identifier = null, color = null, position_board = null,){
    this.__prototype__ = proto
    this.identifier = identifier
    this.piece = 'bishop'
    this.color = color
    this.position_board = position_board;
  }
  check_movement = (future_pos) => { return check_diagonal_movements(this, future_pos)}

}

class Queen{
  constructor(proto, identifier = null, color = null, position_board = null,){
    this.__prototype__ = proto
    this.identifier = identifier
    this.piece = 'queen'
    this.color = color
    this.position_board = position_board;
  }
  check_movement = (future_pos) => { return (check_diagonal_movements(this, future_pos)||check_vertical_movements(this, future_pos))}

}


class King{
  constructor(proto, identifier = null, color = null, position_board = null,){
    this.__prototype__ = proto
    this.identifier = identifier
    this.piece = 'horse'
    this.color = color
    this.position_board = position_board;
  }
  check_movement(future_pos){
    let a_check = false
    let possible = ''
      possible = [
          [this.position_board[0]-1 ,this.position_board[1]],
          [this.position_board[0]+1 ,this.position_board[1]],
          [this.position_board[0]   ,this.position_board[1]-1],
          [this.position_board[0]   ,this.position_board[1]+1],
          [this.position_board[0]-1 ,this.position_board[1]-1],
          [this.position_board[0]-1 ,this.position_board[1]+1],
          [this.position_board[0]+1 ,this.position_board[1]-1],
          [this.position_board[0]+1 ,this.position_board[1]+1]
      ]

      for (let x = 0; x < 8; x++){
          if (possible[x][0] == future_pos[0]){

            if (possible[x][1] == future_pos[1]){
              a_check = check_king_line(this, future_pos)
              if (a_check == true){
                return false
              }else{
                return true
              }
              
            }
          }


      }
  }
}


function create_pieces(proto, color){
  if (color == 'white'){
    return [new Pawn(proto,'W_P1','white', [6,0]),new Pawn(proto,'W_P2','white', [6,1]),new Pawn(proto,'W_P3','white', [6,2]), 
    new Pawn(proto,'W_P4','white', [6,3]),new Pawn(proto,'W_P5','white', [6,4]),new Pawn(proto,'W_P6','white', [6,5]), 
    new Pawn(proto,'W_P7','white', [6,6]),new Pawn(proto,'W_P8','white', [6,7]),new Tower(proto,'W_TL','white', [7,0]),
    new Horse(proto,'W_HL','white', [7,1]),new Bishop(proto,'W_BL','white', [7,2]),new Queen(proto,'W_Q','white', [7,3]),
    new King(proto,'W_K','white', [3,3]),new Bishop(proto,'W_BR','white', [7,5]),new Horse(proto,'W_HR','white', [7,6]),
    new Tower(proto,'W_TR','white', [7,7])]
  }
  else{
    return [new Pawn(proto,'B_P1','black', [1,0]),new Pawn(proto,'B_P2','black', [1,1]),new Pawn(proto,'B_P3','black', [1,2]), 
    new Pawn(proto,'B_P4','black', [1,3]),new Pawn(proto,'B_P5','black', [1,4]),new Pawn(proto,'B_P6','black', [1,5]), 
    new Pawn(proto,'B_P7','black', [1,6]),new Pawn(proto,'B_P8','black', [1,7]),new Tower(proto,'B_TL','black', [0,0]),
    new Horse(proto,'B_HL','black', [0,1]),new Bishop(proto,'B_BL','black', [0,2]),new Queen(proto,'B_Q','black', [0,3]),
    new King(proto,'B_K','black', [0,4]),new Bishop(proto,'B_BR','black', [0,5]),new Horse(proto,'B_HR','black', [0,6]),
    new Tower(proto,'B_TR','black', [0,7])]
  }
  

}


class Player{
  constructor(name = null, color = null, pieces = null, play_state = true, check = false){
    this.name = name;
    this.play_state = play_state;
    this.check = check;
    this.color = color;
    this.pieces = pieces;
  }
  
}

var board = [[['B_TL'],['B_HL'],['B_BL'],['B_Q'],['B_K'],['B_BR'],['B_HR'],['B_TR']],
                  [['B_P1'],['B_P2'],['B_P3'],['B_P4'],['B_P5'],['B_P6'],['B_P7'],['B_P8']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_P1'],['W_P2'],['W_P3'],['W_P4'],['W_P5'],['W_P6'],['W_P7'],['W_P8']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['W_K'],['W_BR'],['W_HR'],['W_TR']]];







player1 = new Player('Player1', color='white')

player1.pieces = create_pieces(player1, player1.color)

player2 = new Player('Player2', color='black')

player2.pieces = create_pieces(player2, player2.color)


print_board(board)







function get_future_pos(player, init_pos = null, future_pos = null){
  let valid_move = false
  for (let x = 0; x < player.pieces.length; x++){
    if (board[init_pos[0]][init_pos[1]] == player.pieces[x].identifier){
        if (player.color == player.pieces[x].color){
          try{
            let temp_color = ''
            if (player.pieces[x].color == 'white'){
              temp_color = 'W'
            }else{
              temp_color = 'B'
            }
            if (temp_color == board[future_pos[0]][future_pos[1]][0].split("_")[0]){
              //SAME COLORS
              return false
            }else{
              //DIFFERENT COLORS  
              valid_move = player.pieces[x].check_movement(future_pos)
              console.log(valid_move)
              if (valid_move == true){
                board[future_pos[0]][future_pos[1]] = board[player.pieces[x].position_board[0]][player.pieces[x].position_board[1]]
                board[player.pieces[x].position_board[0]][player.pieces[x].position_board[1]] = ['    ']
                player.pieces[x].position_board = [future_pos[0],future_pos[1]]
                print_board(board)
              }else{
                console.log("\n\n###################\n#####FAIL######\n###################")
              }
              return valid_move;
              
            }
          }
          catch{
            valid_move = player.pieces[x].check_movement(future_pos)
            return valid_move;
          }
          
        }
    }
  }
}


function print_board(board){
  //console.clear()
    console.log(
      "\n     0         1         2         3        4        5        6       7"+
      "\n  ------------------------------------------------------------------------\n"+
      0+"  |  "+board[0][0]+"  |  "+board[0][1]+"  |  "+board[0][2]+"  |  "+board[0][3]+"  |  "+board[0][4]+"  |  "+board[0][5]+"  |  "+board[0][6]+"  |  "+board[0][7]+"  |  "
      +"\n  ------------------------------------------------------------------------\n"
      +1+"  |  "+board[1][0]+"  |  "+board[1][1]+"  |  "+board[1][2]+"  |  "+board[1][3]+"  |  "+board[1][4]+"  |  "+board[1][5]+"  |  "+board[1][6]+"  |  "+board[1][7] +"  |  "
      +"\n  ------------------------------------------------------------------------\n"
      +2+"  |  "+board[2][0]+"  |  "+board[2][1]+"  |  "+board[2][2]+"  |  "+board[2][3]+"  |  "+board[2][4]+"  |  "+board[2][5]+"  |  "+board[2][6]+"  |  "+board[2][7] +"  |  "
      +"\n  ------------------------------------------------------------------------\n"
      +3+"  |  "+board[3][0]+"  |  "+board[3][1]+"  |  "+board[3][2]+"  |  "+board[3][3]+"  |  "+board[3][4]+"  |  "+board[3][5]+"  |  "+board[3][6]+"  |  "+board[3][7] +"  |  "
      +"\n  ------------------------------------------------------------------------\n"
      +4+"  |  "+board[4][0]+"  |  "+board[4][1]+"  |  "+board[4][2]+"  |  "+board[4][3]+"  |  "+board[4][4]+"  |  "+board[4][5]+"  |  "+board[4][6]+"  |  "+board[4][7] +"  |  "
      +"\n  ------------------------------------------------------------------------\n"
      +5+"  |  "+board[5][0]+"  |  "+board[5][1]+"  |  "+board[5][2]+"  |  "+board[5][3]+"  |  "+board[5][4]+"  |  "+board[5][5]+"  |  "+board[5][6]+"  |  "+board[5][7] +"  |  "
      +"\n  ------------------------------------------------------------------------\n"
      +6+"  |  "+board[6][0]+"  |  "+board[6][1]+"  |  "+board[6][2]+"  |  "+board[6][3]+"  |  "+board[6][4]+"  |  "+board[6][5]+"  |  "+board[6][6]+"  |  "+board[6][7] +"  |  "
      +"\n  ------------------------------------------------------------------------\n"
      +7+"  |  "+board[7][0]+"  |  "+board[7][1]+"  |  "+board[7][2]+"  |  "+board[7][3]+"  |  "+board[7][4]+"  |  "+board[7][5]+"  |  "+board[7][6]+"  |  "+board[7][7] +"  |  "
      +"\n  ------------------------------------------------------------------------\n")
}










// TEST COMMANDS
/*
###########################################################
######### REFRESH THE PAGE FOR EACH TEST BATTERY ##########
###########################################################

//DEFAULT BOARD
[[['B_TL'],['B_HL'],['B_BL'],['B_Q'],['B_K'],['B_BR'],['B_HR'],['B_TR']],
                  [['B_P1'],['B_P2'],['B_P3'],['B_P4'],['B_P5'],['B_P6'],['B_P7'],['B_P8']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_P1'],['W_P2'],['W_P3'],['W_P4'],['W_P5'],['W_P6'],['W_P7'],['W_P8']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['W_K'],['W_BR'],['W_HR'],['W_TR']]];



move foward without going over (pawn)
get_future_pos(player1, [6,3], [4,3])
get_future_pos(player1, [4,3], [3,3])
get_future_pos(player1, [3,3], [2,3])
get_future_pos(player1, [2,3], [1,3]) Invalid Movement


//TOWER / QUEEN / BISHOP BOARD

[[['B_TL'],['B_HL'],['B_BL'],['B_Q'],['B_K'],['B_BR'],['B_HR'],['B_TR']],
                  [['B_P1'],['B_P2'],['B_P3'],['B_P4'],['B_P5'],['B_P6'],['B_P7'],['B_P8']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['W_K'],['W_BR'],['W_HR'],['W_TR']]];

TESTING TOWER MOVEMENTS OR QUEEN HORIZONTAL AND VERTICAL MOVEMENTS
  move foward without going over 
  get_future_pos(player1, [7,0], [2,0]) // sucess
  get_future_pos(player1, [7,0], [0,0]) // fail

  move foward and capture (tower)
  get_future_pos(player1, [7,0], [1,0])

  move right 
  get_future_pos(player1, [7,0], [2,0]) 
  get_future_pos(player1, [2,0], [2,3]) // sucess


  move right without going over and test capture right
  get_future_pos(player1, [7,0], [1,0])
  get_future_pos(player1, [1,0], [1,1]) // sucess
  get_future_pos(player1, [1,1], [1,3]) // fail


  move left
  get_future_pos(player1, [7,0], [2,0]) 
  get_future_pos(player1, [2,0], [2,6])
  get_future_pos(player1, [2,6], [2,2]) // sucess


  move left without going over and test capture left
  get_future_pos(player1, [7,0], [2,0]) 
  get_future_pos(player1, [2,0], [2,6])
  get_future_pos(player1, [2,6], [1,6])
  get_future_pos(player1, [1,6], [1,5]) // sucess
  get_future_pos(player1, [1,5], [1,3]) // fail



  move down (change the table for template bellow)


  [[['B_TL'],['B_HL'],['B_BL'],['B_Q'],['B_K'],['B_BR'],['B_HR'],['B_TR']],
                  [['B_P1'],['B_P2'],['B_P3'],['B_P4'],['B_P5'],['B_P6'],['B_P7'],['B_P8']],
                  [['    '],['    '],['    '],['    '],['B_TL'],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['B_HL'],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['W_K'],['W_BR'],['W_HR'],['W_TR']]];


  get_future_pos(player1, [7,0], [2,0]) 
  get_future_pos(player1, [2,0], [2,3])
  get_future_pos(player1, [2,3], [5,3]) // sucess


  move down without going over and test capture down 
  get_future_pos(player1, [7,0], [2,0]) 
  get_future_pos(player1, [2,0], [2,3])
  get_future_pos(player1, [2,3], [1,3])
  get_future_pos(player1, [1,3], [0,3])
  get_future_pos(player1, [0,3], [0,4])
  get_future_pos(player1, [0,4], [1,4]) // sucess
  get_future_pos(player1, [1,4], [3,4]) // fail

TESTING HORSE MOVEMENTS

  testing all moves
  get_future_pos(player1, [7,1], [5,2]) 
  get_future_pos(player1, [5,2], [4,4]) 
  get_future_pos(player1, [4,4], [2,3])
  get_future_pos(player1, [2,3], [4,2])
  get_future_pos(player1, [4,2], [3,0])
  get_future_pos(player1, [3,0], [5,1])
  get_future_pos(player1, [5,1], [3,2])
  get_future_pos(player1, [3,2], [4,0])
  get_future_pos(player1, [4,0], [5,2]) // sucess


  testing some captures 
  get_future_pos(player1, [7,1], [5,2]) 
  get_future_pos(player1, [5,2], [3,3])
  get_future_pos(player1, [3,3], [1,4])
  get_future_pos(player1, [1,4], [3,3])
  get_future_pos(player1, [3,3], [1,2])
  get_future_pos(player1, [1,2], [0,0])
  get_future_pos(player1, [0,0], [1,2])
  get_future_pos(player1, [1,2], [0,4]) //sucess

TESTING BISHOP MOVEMENTS
  testing all moves

  get_future_pos(player1, [7,2], [5,0]) 
  get_future_pos(player1, [5,0], [2,3]) 
  get_future_pos(player1, [2,3], [0,5]) //fail
  get_future_pos(player1, [2,3], [0,2]) //fail
  get_future_pos(player1, [2,3], [4,5])
  get_future_pos(player1, [4,5], [7,7]) //fail
  get_future_pos(player1, [4,5], [7,3]) //fail
  get_future_pos(player1, [4,5], [6,3])


  testing all captures 
  get_future_pos(player1, [7,2], [5,0]) 
  get_future_pos(player1, [5,0], [1,4]) 
  get_future_pos(player1, [1,4], [0,3])
  get_future_pos(player1, [0,3], [1,2])
  get_future_pos(player1, [1,2], [2,3])
  get_future_pos(player1, [2,3], [0,5])
  get_future_pos(player1, [0,5], [1,6]) //success


TESTING QUEEN MOVEMENTS

  DIAGONAL MOVEMENTS
    testing all moves

    get_future_pos(player1, [7,3], [4,0]) 
    get_future_pos(player1, [4,0], [2,2]) 
    get_future_pos(player1, [2,2], [0,4]) //fail
    get_future_pos(player1, [2,2], [0,1]) //fail
    get_future_pos(player1, [2,2], [4,4])
    get_future_pos(player1, [4,4], [7,1]) //fail
    get_future_pos(player1, [4,4], [7,7]) //fail
    get_future_pos(player1, [4,4], [6,2])


    testing all captures 
    get_future_pos(player1, [7,3], [4,0]) 
    get_future_pos(player1, [4,0], [1,3]) 
    get_future_pos(player1, [1,3], [0,2])
    get_future_pos(player1, [0,2], [1,1])
    get_future_pos(player1, [1,1], [2,2])
    get_future_pos(player1, [2,2], [0,4])
    get_future_pos(player1, [0,4], [1,5]) //success
  



  testing all captures (if work, all work)
    get_future_pos(player1, [7,3], [1,3]) 
    get_future_pos(player1, [1,3], [0,3]) 
    get_future_pos(player1, [0,3], [0,2]) 
    get_future_pos(player1, [0,2], [0,4]) 
    get_future_pos(player1, [0,4], [1,4])
    get_future_pos(player1, [1,4], [4,4]) //success

  TEST KING MOVEMENTS
  get_future_pos(player1, [7,4], [6,3]) 
  get_future_pos(player1, [6,3], [5,3]) 
  get_future_pos(player1, [5,3], [4,4]) 
  get_future_pos(player1, [4,4], [4,3]) 
  get_future_pos(player1, [4,3], [4,4])
  get_future_pos(player1, [4,4], [5,4]) 
  get_future_pos(player1, [5,4], [6,5])
  get_future_pos(player1, [6,5], [7,4]) //success


CHECK KING






//DIAGONAL CHECK

[[['B_TL'],['B_HL'],['    '],['B_Q'],['B_K'],['    '],['B_HR'],['B_TR']],
                  [['    '],['    '],['W_BL'],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['B_BL'],['    '],['    ']],
                  [['    '],['    '],['    '],['B_K'],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['    '],['W_BR'],['W_HR'],['W_TR']]];

OBS.: Change position king in the class [3,3]
 get_future_pos(player1, [3,3], [4,3]) //fail
 get_future_pos(player1, [3,3], [2,3]) //fail

[[['B_TL'],['B_HL'],['    '],['B_Q'],['B_K'],['    '],['B_HR'],['B_TR']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['W_K'],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['B_BR'],['    '],['    ']],
                  [['    '],['    '],['B_BL'],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['    '],['W_BR'],['W_HR'],['W_TR']]];

get_future_pos(player1, [3,3], [4,3]) //fail
 get_future_pos(player1, [3,3], [3,4]) //fail



 //HORIZONTAL AND VERTICAL CHECK
[[['    '],['B_HL'],['    '],['B_Q'],['B_K'],['    '],['B_HR'],['    ']],
                  [['    '],['    '],['B_TL'],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['W_K'],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['B_TR'],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['    '],['W_BR'],['W_HR'],['W_TR']]];


get_future_pos(player1, [3,3], [3,4]) //fail
get_future_pos(player1, [3,3], [3,2]) //fail

[[['    '],['B_HL'],['    '],['    '],['B_K'],['    '],['B_HR'],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['B_TL'],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['W_K'],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['B_TR'],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['    '],['    '],['    '],['    '],['    '],['    '],['    '],['    ']],
                  [['W_TL'],['W_HL'],['W_BL'],['W_Q'],['    '],['W_BR'],['W_HR'],['W_TR']]];

get_future_pos(player1, [3,3], [2,3]) //fail
get_future_pos(player1, [3,3], [4,3]) //fail

*/